import os
import hashlib
import yara
import logging
from datetime import datetime
from malware_signatures import MALICIOUS_HASHES, SUSPICIOUS_PATTERNS

class MalwareDetector:
    def __init__(self):
        self.suspicious_extensions = {'.exe', '.dll', '.bat', '.vbs', '.ps1'}
        self.log_file = 'scan_results.log'
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(
            filename=self.log_file,
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

    def calculate_file_hash(self, file_path):
        try:
            with open(file_path, 'rb') as f:
                return hashlib.md5(f.read()).hexdigest()
        except Exception as e:
            logging.error(f"Error calculating hash for {file_path}: {str(e)}")
            return None

    def check_file_content(self, file_path):
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                for pattern in SUSPICIOUS_PATTERNS:
                    if pattern in content:
                        logging.warning(f"Suspicious pattern '{pattern}' found in {file_path}")
                        return True
            return False
        except Exception as e:
            logging.error(f"Error checking file content for {file_path}: {str(e)}")
            return False

    def is_suspicious(self, file_path):
        # 检查文件扩展名
        if os.path.splitext(file_path)[1].lower() in self.suspicious_extensions:
            # 计算并检查文件哈希
            file_hash = self.calculate_file_hash(file_path)
            if file_hash in MALICIOUS_HASHES:
                logging.warning(f"Malicious hash match found for {file_path}")
                return True
                
            # 检查文件内容
            if self.check_file_content(file_path):
                return True
                
            # 检查文件大小
            if self.check_file_size(file_path):
                return True
                
        return False

    def scan_directory(self, directory):
        logging.info(f"Starting scan of directory: {directory}")
        suspicious_files = []
        total_files = 0
        scanned_files = 0

        for root, _, files in os.walk(directory):
            total_files += len(files)
            for file in files:
                file_path = os.path.join(root, file)
                scanned_files += 1
                print(f"\r扫描进度: {scanned_files}/{total_files} 文件", end='')
                
                if self.is_suspicious(file_path):
                    suspicious_files.append({
                        'path': file_path,
                        'hash': self.calculate_file_hash(file_path),
                        'size': os.path.getsize(file_path)
                    })
                    logging.warning(f"Suspicious file found: {file_path}")

        print("\n")
        return suspicious_files

def main():
    detector = MalwareDetector()
    
    print("简易恶意文件检测器")
    print("-" * 30)
    
    while True:
        directory = input("\n请输入要扫描的目录路径（输入 'q' 退出）: ")
        if directory.lower() == 'q':
            break
            
        if not os.path.exists(directory):
            print("目录不存在，请重新输入！")
            continue
            
        print("\n开始扫描...")
        suspicious_files = detector.scan_directory(directory)
        
        if suspicious_files:
            print("\n发现可疑文件：")
            for file_info in suspicious_files:
                print(f"\n文件路径: {file_info['path']}")
                print(f"文件哈希: {file_info['hash']}")
                print(f"文件大小: {file_info['size']} 字节")
        else:
            print("\n未发现可疑文件。")
            
        print(f"\n扫描结果已保存到 {detector.log_file}")

if __name__ == "__main__":
    main()